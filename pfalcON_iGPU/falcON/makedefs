
# -*- makefile -*-
################################################################################
#
# makedefs for the falcON project
#
################################################################################

# -----------------
# Hardware platform
# -----------------

PLATFORM 	:= $(shell uname -m)

# --------------------
# maximum tensor order
# --------------------

KMAX		:= 6

# -----------
# directories
# -----------

CL_INC          := -I/opt/AMDAPPSDK-3.0/include -I/opt/intel/opencl/include/ #-I/opt/sdks/amd/current/include/
CL_LIB		:= -L/opt/AMDAPPSDK-3.0/lib/x86_64 -L/opt/intel/opencl/ 
INC		:= inc/
IUTI		:= $(INC)utils/
SRC		:= src/
ACC		:= acc/
MAN		:= manip/
BIN		:= bin/
LIB		:= lib/
MODE		:= 755
PUBLICMODE	:= 777
BINT		:= $(BIN).dummy
LIBT		:= $(LIB).dummy
ACCT		:= $(ACC).dummy
MANT		:= $(MAN).dummy
BFCT		:= $(LIB)bodyfunc/.dummy

$(BINT)		:
		mkdir -p -m $(MODE) $(BIN)
		touch $(BINT)
$(LIBT)		:
		mkdir -p -m $(MODE) $(LIB)
		touch $(LIBT)
$(BFCT)		: $(LIBT)
		mkdir -p -m $(PUBLICMODE) $(LIB)bodyfunc
		mkdir -p -m $(PUBLICMODE) $(LIB)bodiesfunc
		touch $(BFCT)
$(MANT)		:
		mkdir -p -m $(MODE) $(MAN)
		touch $(MANT)
$(ACCT)		:
		mkdir -p -m $(MODE) $(ACC)
		touch $(ACCT)

# ------------
# NEMO library
# ------------

ifdef NEMO

INEMO		:= -I$(NEMOINC) -I$(NEMOLIB)
DNEMO		:= -DfalcON_NEMO
LNEMO		:= -L$(NEMOLIB) -lnemo -ldl

endif

# -----------------------
# compiler and linker etc
# -----------------------


# if no compiler set, use GNU compiler
ifeq ($(COMPILER),)
COMPILER := gcc
endif

# GNU compiler
ifeq ($(COMPILER),gcc)
LIMITED_WARNINGS	:= -Wextra -Winit-self 
-include utils/make.gcc
endif

# Portland group compiler
ifeq ($(COMPILER),pgi)
-include utils/make.pgi
endif

# Pathscale compiler
ifeq ($(COMPILER),pth)
-include utils/make.pth
endif

# Sun compiler
ifeq ($(COMPILER),sun)
-include utils/make.sun
endif

# Intel compiler
ifeq ($(COMPILER),icc)
-include utils/make.icc
endif

# final compiler and linker flags
FILEIO		:= -D_FILE_OFFSET_BITS=64
NBDYFLAGS	:= $(DSPH) $(DPRECISION) $(DNEMO) $(DSSE) $(DSOFT) $(DWALTER)
CFLAGS		:= $(FILEIO) $(CFLAGS) $(DPROPER) $(DEBUG)
CXXFLAGS	:= $(FILEIO) $(CXXFLAGS) $(DPROPER) $(DEBUG)

AR		:= ar rc
RL		:= ranlib

# ---------------
# WDutils library
# ---------------

IUTIL		:= -I$(IUTI)
ifdef STATIC
LUTIL		:= -Lutils/lib -lWDutils
else
LUTIL		:= -Lutils/lib -lWDutils
endif

# --------------
# falcON library
# --------------

LFALCON		:= -L$(LIB) -l$(LIBNAME) $(LUTIL) $(LNEMO)

falcON		:= $(links) $(LIB)lib$(LIBNAME).a $(LIB)lib$(LIBNAME).so

# -------------------------
# compile and link commands
# -------------------------

#ifndef $(MATHLIB)
#MATHLIB		:= -lm
#endif

MAKE_OBJ	= $(CXX) -g -c -o $@ $< -I$(INC) $(CL_INC) $(IUTIL) $(CXXFLAGS)
MAKE_MANIP	= $(CXX)-g -o $@ $< -I$(INC) $(IUTIL) $(CXXFLAGS) $(NBDYFLAGS) -L$(LIB) -l$(LIBNAME) $(LUTIL) $(LNEMO) -shared
MAKE_ACC	= $(CXX) -g -o $@ $< -I$(INC) $(IUTIL) $(INEMO) $(CXXFLAGS) -L$(LIB) -l$(LIBNAME) $(LUTIL) $(LNEMO) -shared
MAKE_EXE	= $(CXX) -g -o $@ $< -I$(INC) $(CL_INC) $(CL_LIB) $(IUTIL) $(CXXFLAGS) $(LDpLIB)
MAKE_EXE_C	= $(CC) -g -o $@ $< -I$(INC) $(IUTIL) $(CFLAGS)
MAKE_EXE_F	= $(FC) -g -o $@ $< -I$(INC) $(IUTIL) $(OPTFLAGS)
NEMO_EXE_FLGS	= $(NBDYFLAGS) $(LFALCON) $(MATHLIB)

